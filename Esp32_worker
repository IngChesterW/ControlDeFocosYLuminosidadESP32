#include <Wire.h>
#include <WiFi.h>
#include <VL53L0X.h>

const char* ssid = "TU_SSID";            // Tu red WiFi
const char* password = "TU_PASSWORD";    // Tu contraseña WiFi

// Configuración del servidor central
const char* server = "192.168.1.100";    // Dirección IP del servidor central
const int serverPort = 80;

// Número de focos controlados por cada ESP32 (10 focos por ESP32)
const int focosPorESP32 = 10;

// Pines para dimmers
int dimmerPins[focosPorESP32] = {4, 5, 18, 19, 21, 22, 23, 25, 26, 27};

// Sensores VL53L0X
VL53L0X sensors[focosPorESP32][6];  // 6 sensores VL53L0X por foco

// Variables para ajustar la distancia y la velocidad
int distanciaActivacion = 1000;     // Distancia en milímetros para activar el foco
int velocidadAtenuacion = 50;       // Velocidad de atenuación en milisegundos

void setup() {
  Serial.begin(115200);
  Wire.begin();

  // Inicializar sensores VL53L0X para cada foco
  for (int i = 0; i < focosPorESP32; i++) {
    for (int j = 0; j < 6; j++) {
      sensors[i][j].setTimeout(500);
      sensors[i][j].init();
      sensors[i][j].startContinuous();
    }
  }

  // Inicializar los pines para los dimmers
  for (int i = 0; i < focosPorESP32; i++) {
    pinMode(dimmerPins[i], OUTPUT);
  }

  // Conectar a la red WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Conectando a WiFi...");
  }
  Serial.println("Conectado a WiFi");

  // Conectar al servidor central
  WiFiClient client;
  if (!client.connect(server, serverPort)) {
    Serial.println("Conexión al servidor fallida");
    return;
  }
  Serial.println("Conectado al servidor");
}

void loop() {
  for (int i = 0; i < focosPorESP32; i++) {
    int distanciaPromedio = 0;

    // Medir la distancia promedio de los 6 sensores VL53L0X para cada foco
    for (int j = 0; j < 6; j++) {
      uint16_t distancia = sensors[i][j].readRangeContinuousMillimeters();
      if (!sensors[i][j].timeoutOccurred()) {
        distanciaPromedio += distancia;
      }
    }
    distanciaPromedio /= 6;

    // Control de la atenuación basado en la distancia
    if (distanciaPromedio < distanciaActivacion) {
      int nivelAtenuacion = map(distanciaPromedio, 0, distanciaActivacion, 255, 0); // Ajustar nivel de atenuación
      atenuarLuz(i, nivelAtenuacion);
    } else {
      apagarLuz(i);
    }

    // Enviar datos al servidor central
    WiFiClient client;
    if (client.connect(server, serverPort)) {
      String datos = "GET /actualizar?foco=" + String(i) + "&distancia=" + String(distanciaPromedio) + " HTTP/1.1\r\n";
      datos += "Host: " + String(server) + "\r\n";
      datos += "Connection: close\r\n\r\n";
      client.print(datos);
      client.stop();
    }
    delay(100);  // Pausa entre la actualización de cada foco
  }
}

// Función para atenuar la luz
void atenuarLuz(int foco, int nivel) {
  int nivelActual = 255;  // Luz completamente apagada
  while (nivelActual > nivel) {
    nivelActual--;
    analogWrite(dimmerPins[foco], nivelActual);
    delay(velocidadAtenuacion);  // Controla la velocidad de atenuación
  }
}

// Función para apagar la luz gradualmente
void apagarLuz(int foco) {
  int nivelActual = 255;
  while (nivelActual > 0) {
    nivelActual--;
    analogWrite(dimmerPins[foco], nivelActual);
    delay(velocidadAtenuacion);  // Controla la velocidad de apagado
  }
}
